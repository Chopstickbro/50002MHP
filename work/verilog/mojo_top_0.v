/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg a_out,
    output reg b_out,
    output reg c_out,
    input sum,
    input carry
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_counter_clock_out;
  clock_2 counter_clock (
    .clk(clk),
    .rst(~rst_n),
    .out(M_counter_clock_out)
  );
  wire [1-1:0] M_adder_checker_out;
  reg [1-1:0] M_adder_checker_a;
  reg [1-1:0] M_adder_checker_b;
  reg [1-1:0] M_adder_checker_cin;
  reg [1-1:0] M_adder_checker_sum;
  reg [1-1:0] M_adder_checker_carry;
  adder_checker_3 adder_checker (
    .clk(clk),
    .rst(~rst_n),
    .a(M_adder_checker_a),
    .b(M_adder_checker_b),
    .cin(M_adder_checker_cin),
    .sum(M_adder_checker_sum),
    .carry(M_adder_checker_carry),
    .out(M_adder_checker_out)
  );
  
  wire [1-1:0] M_auto_check_a;
  wire [1-1:0] M_auto_check_b;
  wire [1-1:0] M_auto_check_c;
  reg [1-1:0] M_auto_check_toggle;
  auto_check_4 auto_check (
    .rst(~rst_n),
    .toggle(M_auto_check_toggle),
    .a(M_auto_check_a),
    .b(M_auto_check_b),
    .c(M_auto_check_c)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_auto_check_toggle = M_counter_clock_out;
    M_adder_checker_sum = sum;
    M_adder_checker_carry = carry;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'h0;
    io_seg[6+0-:1] = ~M_adder_checker_out;
    if (io_dip[8+0+0-:1]) begin
      io_led[8+0+0-:1] = M_counter_clock_out;
      io_led[0+0+0-:1] = M_auto_check_a;
      io_led[0+1+0-:1] = M_auto_check_b;
      io_led[0+2+0-:1] = M_auto_check_c;
      a_out = M_auto_check_a;
      b_out = M_auto_check_b;
      c_out = M_auto_check_c;
      M_adder_checker_a = M_auto_check_a;
      M_adder_checker_b = M_auto_check_b;
      M_adder_checker_cin = M_auto_check_c;
    end else begin
      io_led[0+0+0-:1] = io_dip[0+0+0-:1];
      io_led[0+1+0-:1] = io_dip[0+1+0-:1];
      io_led[0+2+0-:1] = io_dip[0+2+0-:1];
      a_out = io_dip[0+0+0-:1];
      b_out = io_dip[0+1+0-:1];
      c_out = io_dip[0+2+0-:1];
      M_adder_checker_a = io_dip[0+0+0-:1];
      M_adder_checker_b = io_dip[0+1+0-:1];
      M_adder_checker_cin = io_dip[0+2+0-:1];
    end
  end
endmodule
